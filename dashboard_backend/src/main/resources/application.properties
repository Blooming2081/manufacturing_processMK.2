# ===================================
# Spring Boot Dashboard Backend Configuration
# ===================================

# 서버 설정
server.port=8080
server.servlet.context-path=/

# 애플리케이션 정보
spring.application.name=dashboard-backend

# ===================================
# PostgreSQL 데이터베이스 설정 (메인 DB)
# ===================================
spring.datasource.url=jdbc:postgresql://proxy152.r3proxy.com:34038/manufacturing_dashboard
spring.datasource.driver-class-name=org.postgresql.Driver
spring.datasource.username=postgres
spring.datasource.password=1234

# 커넥션 풀 설정
spring.datasource.hikari.maximum-pool-size=20
spring.datasource.hikari.minimum-idle=5
spring.datasource.hikari.connection-timeout=30000
spring.datasource.hikari.idle-timeout=600000
spring.datasource.hikari.max-lifetime=1800000

# ===================================
# JPA/Hibernate 설정 (PostgreSQL용)
# ===================================
spring.jpa.hibernate.ddl-auto=update
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.properties.hibernate.format_sql=true
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation=true

# ===================================
# InfluxDB 3.x 설정 (시계열 데이터용) - Spring Boot 자동 인식
# ===================================
# 기본 연결 설정
spring.influxdb.url=http://proxy151.r3proxy.com:34239
spring.influxdb.token=apiv3_3LM-hA4d2qpPyJTMvrs-6CFoXZJVgocG5vgRWm9j_PD3Dv795XFkOUxO_lCeC1vOrG929cgsNchQpOQhr1gm2g
spring.influxdb.org=IOT-sensor
spring.influxdb.bucket=IOT-sensor

# 타임아웃 설정
spring.influxdb.connection-timeout=30s
spring.influxdb.read-timeout=60s
spring.influxdb.write-timeout=30s

# 압축 설정
spring.influxdb.compression-enabled=true

# 로그 레벨 설정
spring.influxdb.log-level=BASIC

# ===================================
# 커스텀 InfluxDB 설정 (직접 @Value로 읽어서 사용)

# @Component
# @ConfigurationProperties(prefix = "app.influxdb")
# public class InfluxDBCustomConfig {
    
#     private Api api = new Api();
#     private Batch batch = new Batch();
#     private Query query = new Query();
    
#     // getter/setter...
    
#     public static class Api {
#         private Sql sql = new Sql();
#         private Write write = new Write();
#         // getter/setter...
#     }
# }
#  OR   개별설정
# @Value("${app.influxdb.batch.size}")
# private int batchSize;

# @Value("${app.influxdb.query.max-rows}")
# private int maxRows;
# ===================================
# API 엔드포인트 설정
app.influxdb.api.sql.endpoint=/api/v3/query/sql
app.influxdb.api.sql.format=json
app.influxdb.api.sql.precision=ms
app.influxdb.api.write.endpoint=/api/v2/write
app.influxdb.api.write.precision=ms
app.influxdb.api.health.endpoint=/health
app.influxdb.api.ping.endpoint=/ping

# 배치 처리 설정
app.influxdb.batch.enabled=true
app.influxdb.batch.size=1000
app.influxdb.batch.flush-interval=5000
app.influxdb.batch.max-retries=3

# 연결 풀 설정
app.influxdb.pool.max-connections=10
app.influxdb.pool.connection-idle-timeout=300000

# 쿼리 설정
app.influxdb.query.max-rows=10000
app.influxdb.query.timeout=30000
app.influxdb.query.cache.enabled=true
app.influxdb.query.cache.ttl=300000

# Arrow Flight SQL 설정
app.influxdb.flight.enabled=false
app.influxdb.flight.port=8087

# 데이터 보존 및 관리 설정
influxdb.retention.enabled=true
app.influxdb.retention.default-period=30d
app.influxdb.cleanup.enabled=true
app.influxdb.cleanup.interval=1h

# ===================================
# JSON 설정
# ===================================
spring.jackson.serialization.write-dates-as-timestamps=false
spring.jackson.time-zone=Asia/Seoul
spring.jackson.serialization.write-durations-as-timestamps=false




# ===================================
# 로깅 설정
# ===================================
logging.level.com.u1mobis.dashboard_backend=DEBUG
logging.level.org.springframework.web=DEBUG
logging.level.org.hibernate.SQL=DEBUG
logging.level.org.hibernate.type.descriptor.sql.BasicBinder=TRACE
logging.pattern.console=%d{yyyy-MM-dd HH:mm:ss} - %msg%n

# ===================================
# 관리 엔드포인트 설정
# ===================================
management.endpoints.web.exposure.include=health,info,metrics
management.endpoint.health.show-details=always

# ===================================
# 커스텀 애플리케이션 설정
# ===================================
# IoT 데이터 설정
app.iot.data-retention-days=30
app.iot.max-stations=50

# 대시보드 설정
app.dashboard.update-interval=3000
app.dashboard.cache-duration=5000

# ===================================
# 운영환경용 MySQL 설정 (주석 처리됨)
# ===================================
# spring.datasource.url=jdbc:mysql://localhost:3306/dashboard_db?useSSL=false&serverTimezone=UTC&allowPublicKeyRetrieval=true
# spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
# spring.datasource.username=dashboard_user
# spring.datasource.password=your_password
# spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL8Dialect
# spring.jpa.hibernate.ddl-auto=update
